{
	"info": {
		"_postman_id": "f22d5c64-c7a5-46b5-8009-890f24840e17",
		"name": "New Collection_HW_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1/login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  ДЗ_3 Postman\r",
							"// =====\r",
							"\r",
							"// 1) необходимо залогиниться\r",
							"// POST\r",
							"// http://162.55.220.72:5005/login\r",
							"// login : str (кроме /)\r",
							"// password : str\r",
							"\r",
							"// Приходящий токен необходимо передать во все остальные запросы.\r",
							"\r",
							"var login_data = pm.response.json();\r",
							"var resp_token = login_data.token\r",
							"\r",
							"pm.environment.set(\"token\", resp_token);\r",
							"// ===================\r",
							"// дальше все запросы требуют наличие токена.\r",
							"// ===================\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3) http://162.55.220.72:5005/new_data\r",
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"// Resp.\r",
							"// {'name':name,\r",
							"//   'age': int(age),\r",
							"//   'salary': [salary, str(salary*2), str(salary*3)]}\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"// 2) Проверка структуры json в ответе.\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"// ===================\r",
							"\r",
							"// 4) http://162.55.220.72:5005/test_pet_info\r",
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// weight: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"\r",
							"// Resp.\r",
							"// {'name': name,\r",
							"//  'age': age,\r",
							"//  'daily_food':weight * 0.012,\r",
							"//  'daily_sleep': weight * 2.5}\r",
							"\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"// 2) Проверка структуры json в ответе.\r",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"// ===================\r",
							"\r",
							"// 5) http://162.55.220.72:5005/get_test_user\r",
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"// Resp.\r",
							"// {'name': name,\r",
							"//  'age':age,\r",
							"//  'salary': salary,\r",
							"//  'family':{'children':[['Alex', 24],['Kate', 12]],\r",
							"//  'u_salary_1.5_year': salary * 4}\r",
							"//   }\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"// 2) Проверка структуры json в ответе.\r",
							"// 3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"\r",
							"// ===================\r",
							"\r",
							"// 6) http://162.55.220.72:5005/currency\r",
							"// req.\r",
							"// POST\r",
							"// auth_token\r",
							"\r",
							"// Resp. Передаётся список массив объектов.\r",
							"// [\r",
							"// {\"Cur_Abbreviation\": str,\r",
							"//  \"Cur_ID\": int,\r",
							"//  \"Cur_Name\": str\r",
							"// }\r",
							"// …\r",
							"// {\"Cur_Abbreviation\": str,\r",
							"//  \"Cur_ID\": int,\r",
							"//  \"Cur_Name\": str\r",
							"// }\r",
							"// ]\r",
							"\r",
							"// Тесты:\r",
							"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"\r",
							"//  ===================\r",
							"\r",
							"// 7) http://162.55.220.72:5005/curr_byn\r",
							"// req.\r",
							"// POST\r",
							"// auth_token\r",
							"// curr_code: int\r",
							"\r",
							"// Resp.\r",
							"// {\r",
							"//     \"Cur_Abbreviation\": str\r",
							"//     \"Cur_ID\": int,\r",
							"//     \"Cur_Name\": str,\r",
							"//     \"Cur_OfficialRate\": float,\r",
							"//     \"Cur_Scale\": int,\r",
							"//     \"Date\": str\r",
							"// }\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"// 2) Проверка структуры json в ответе.\r",
							"\r",
							"\r",
							"// ===============\r",
							"// ***\r",
							"// 1) получить список валют\r",
							"// 2) итерировать список валют\r",
							"// 3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"// 4) если возвращается 500 код, переходим к следующей итреации\r",
							"// 5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"// 6) если поле есть, пишем в консоль инфу про фалюту в виде response\r",
							"// {\r",
							"//     \"Cur_Abbreviation\": str\r",
							"//     \"Cur_ID\": int,\r",
							"//     \"Cur_Name\": str,\r",
							"//     \"Cur_OfficialRate\": float,\r",
							"//     \"Cur_Scale\": int,\r",
							"//     \"Date\": str\r",
							"// }\r",
							"// 7) переходим к следующей итерации"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "2/user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2) \r",
							"\r",
							"// req. (RAW JSON)\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"\r",
							"// resp.\r",
							"// {'start_qa_salary':salary,\r",
							"//  'qa_salary_after_6_months': salary * 2,\r",
							"//  'qa_salary_after_12_months': salary * 2.9,\r",
							"//  'person': {'u_name':[user_name, salary, age],\r",
							"//                                 'u_age':age,\r",
							"//                                 'u_salary_1.5_year': salary * 4}\r",
							"//                                 }\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"let schema = \r",
							" {\r",
							"     \"type\":\"object\",\r",
							"     \"properties\":{\r",
							"        \"person\":{\"type\":\"object\",\r",
							"                \"properties\":{\r",
							"                    \"u_age\":{\"type\":\"integer\"                            },\r",
							"                 \"u_name\":{\"type\":\"array\",\r",
							"                          \"items\":[{\"type\":\"string\"},\r",
							"                        {\"type\":\"number\"}, \r",
							"                        {\"type\":\"number\"}]\r",
							"                },    \r",
							"                    \"u_salary_1_5_year\":{\"type\":\"number\"}\r",
							"                },\r",
							"            \"qa_salary_after_12_months\":{\"type\":\"number\"},\r",
							"            \"qa_salary_after_6_months\":{\"type\":\"number\"},\r",
							"            \"start_qa_salary\":{\"type\":\"number\"}   \r",
							"               }\r",
							"              }  \r",
							" };    \r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							" let salary = jsonData.person.u_name[1];\r",
							"\r",
							"\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(parseInt(salary*2))\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(parseInt(salary*2.9))\r",
							"});\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(parseInt(jsonData.person.u_salary_1_5_year)).to.eql(parseInt(salary*4))\r",
							"});\r",
							"\r",
							"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"\r",
							"let salary_1 = jsonData.person.u_salary_1_5_year;\r",
							"console.log(salary_1);\r",
							"\r",
							"pm.environment.set(\"salary_1\", jsonData.person.u_salary_1_5_year);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\":34,\r\n    \"salary\":{{salary}},\r\n    \"name\":\"Marina\",\r\n    \"auth_token\": \"{{token}}\"\r\n\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "3/get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary_1}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "4/new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3) http://162.55.220.72:5005/new_data\r",
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"// Resp.\r",
							"// {'name':name,\r",
							"//   'age': int(age),\r",
							"//   'salary': [salary, str(salary*2), str(salary*3)]}\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"// {\r",
							"//     \"age\": 34,\r",
							"//     \"name\": \"Marina\",\r",
							"//     \"salary\": [\r",
							"//         700,\r",
							"//         \"1400\",\r",
							"//         \"2100\"\r",
							"//     ]\r",
							"// }\r",
							"\r",
							"\r",
							"let schema = \r",
							"{\r",
							"\"type\":\"object\",\r",
							"      \"properties\":{\r",
							"          \"age\":{\"type\":\"integer\"},\r",
							"          \"name\":{\"type\":\"string\"},\r",
							"          \"salary\":{\"type\":\"array\",\r",
							"               \"items\":[{\"type\":\"integer\"},\r",
							"               {\"type\":\"string\"},\r",
							"               {\"type\":\"string\"}]\r",
							"      }\r",
							"      }\r",
							" }\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"   \r",
							"});\r",
							"\r",
							" \r",
							" // 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							" // Resp.\r",
							"// {'name':name,\r",
							"//   'age': int(age),\r",
							"//   'salary': [salary, str(salary*2), str(salary*3)]}\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"let sal = request.data;\r",
							"\r",
							"\r",
							"pm.test(\"Salary_k1\", function () {\r",
							"        pm.expect(parseInt(jsonData.salary[0])).to.eql(parseInt(sal.salary));\r",
							"});\r",
							"pm.test(\"Salary_k2\", function () {\r",
							"        pm.expect(parseInt(jsonData.salary[1])).to.eql(parseInt(sal.salary*2));\r",
							"});\r",
							"pm.test(\"Salary_k3\", function () {\r",
							"        pm.expect(parseInt(jsonData.salary[2])).to.eql(parseInt(sal.salary*3));\r",
							"});\r",
							"\r",
							"\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"To be above\", function () {\r",
							"        pm.expect(parseInt(jsonData.salary[2])).to.be.above(parseInt(jsonData.salary[0]));\r",
							"});\r",
							"\r",
							"pm.test(\"To be above1)\", function () {\r",
							"        pm.expect(parseInt(jsonData.salary[2])).to.be.above(parseInt(jsonData.salary[1]));\r",
							"});\r",
							"\r",
							"// ==================="
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/new_data",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "5/test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/test_pet_info\r",
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// weight: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"\r",
							"// Resp.\r",
							"// {'name': name,\r",
							"//  'age': age,\r",
							"//  'daily_food':weight * 0.012,\r",
							"//  'daily_sleep': weight * 2.5}\r",
							"\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"\r",
							"let schema =\r",
							"\r",
							"{ \"type\":\"object\",\r",
							"     \"properties\":{\r",
							"         \"age\":{\"type\":\"integer\"},\r",
							"         \"daily_food\":{\"type\":\"number\"},\r",
							"         \"daily_sleep\":{\"type\":\"number\"},\r",
							"         \"name\":{\"type\":\"string\"}\r",
							"     }\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"   \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var jsonData = pm.response.json();\r",
							"let weight_pars = request.data;\r",
							"\r",
							"\r",
							"pm.test(\"weight food\", function() {\r",
							"    pm.expect(parseInt(jsonData.weight*0.012)).to.eql(parseInt(weight_pars.daily_food))\r",
							"});\r",
							"\r",
							"pm.test(\"weight sleep\", function() {\r",
							"    pm.expect(parseInt(jsonData.weight*2.5)).to.eql(parseInt(weight_pars.daily_sleep))\r",
							"});\r",
							"\r",
							"// ==================="
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "60",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/test_pet_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "6/get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5) http://162.55.220.72:5005/get_test_user\r",
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"// Resp.\r",
							"// {'name': name,\r",
							"//  'age':age,\r",
							"//  'salary': salary,\r",
							"//  'family':{'children':[['Alex', 24],['Kate', 12]],\r",
							"//  'u_salary_1.5_year': salary * 4}\r",
							"//   }\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2) Проверка структуры json в ответе.\r",
							"let schema = \r",
							"{\r",
							"    \"type\":\"object\",\r",
							"        \"properties\":{\r",
							"            \"name\":{\"type\":\"string\"},\r",
							"            \"age\":{\"type\":\"string\"},\r",
							"            \"salary\":{\"type\":\"integer\"},\r",
							"            \"family\":{\"type\":\"object\",\r",
							"                  \"properties\":\r",
							"                      {\"children\":{\"type\":\"array\",\r",
							"                            \"items\":[{\"type\":\"array\",\r",
							"                                    \"items\":[{\"type\":\"string\"},\r",
							"                                              {\"type\":\"integer\"}]},\r",
							"                                    {\"type\":\"array\",\r",
							"                                     \"items\":[{\"type\":\"string\"},\r",
							"                                             {\"type\":\"integer\"}\r",
							"                                             ]\r",
							"                                        }\r",
							"                                        ]\r",
							"                                    },          \r",
							"                                      \r",
							"                       \"u_salary_1_5_yaer\":{\"type\":\"integer\"}            \r",
							"\r",
							"            }\r",
							"            }         \r",
							"        }\r",
							"}\r",
							"\r",
							"pm.test(\"Shema is valid\", function() {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"// 3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"var jsonData = pm.response.json();\r",
							"let age_pars = request.data;\r",
							"\r",
							"\r",
							"pm.test(\"Test name environment\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"\r",
							"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"pm.test(\"Test age request\", function () {\r",
							"      pm.expect(jsonData.age).to.eql(age_pars.age);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "7/currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 6) http://162.55.220.72:5005/currency\r",
							"// req.\r",
							"// POST\r",
							"// auth_token\r",
							"\r",
							"// Resp. Передаётся список массив объектов.\r",
							"// [\r",
							"// {\"Cur_Abbreviation\": str,\r",
							"//  \"Cur_ID\": int,\r",
							"//  \"Cur_Name\": str\r",
							"// }\r",
							"// …\r",
							"// {\"Cur_Abbreviation\": str,\r",
							"//  \"Cur_ID\": int,\r",
							"//  \"Cur_Name\": str\r",
							"// }\r",
							"// ]\r",
							"\r",
							"// Тесты:\r",
							"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"let x = jsonData.length;\r",
							"\r",
							"function getrandomInt(x) {\r",
							"    return Math.floor(Math.random() * x)\r",
							"};\r",
							"\r",
							"console.log(\"massive.Cur_ID =\", massive = jsonData[getrandomInt(x)]);\r",
							"pm.environment.set(\"curr_code\", massive.Cur_ID);\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/currency",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "8/curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 7) http://162.55.220.72:5005/curr_byn\r",
							"// req.\r",
							"// POST\r",
							"// auth_token\r",
							"// curr_code: int\r",
							"\r",
							"// Resp.\r",
							"// {\r",
							"//     \"Cur_Abbreviation\": str\r",
							"//     \"Cur_ID\": int,\r",
							"//     \"Cur_Name\": str,\r",
							"//     \"Cur_OfficialRate\": float,\r",
							"//     \"Cur_Scale\": int,\r",
							"//     \"Date\": str\r",
							"// }\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2) Проверка структуры json в ответе.\r",
							"\r",
							"let schema =\r",
							"{\r",
							"\"type\":\"object\",\r",
							"    \"properties\":{\r",
							"        \"Cur_Abbreviation\":{\"type\":\"string\"},\r",
							"        \"Cur_ID\":{\"type\":\"integer\"},\r",
							"        \"Cur_Name\":{\"type\":\"string\"},\r",
							"        \"Cur_OfficialRate\":{\"type\":\"number\"},\r",
							"        \"Cur_Scale\":{\"type\":\"integer\"},\r",
							"        \"Date\": {\"forma\":\"date-time\"}\r",
							"    \r",
							"}\r",
							"}\r",
							"\r",
							"   \r",
							"pm.test(\"Shema is valid\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// ===============\r",
							"// ***\r",
							"// 1) получить список валют\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"let Cur_Abbreviation = jsonData.Cur_Abbreviation;\r",
							"\r",
							"console.log(Cur_Abbreviation);\r",
							"\r",
							"// 2) итерировать список валют\r",
							"// 3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"// 4) если возвращается 500 код, переходим к следующей итреации\r",
							"// 5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"// 6) если поле есть, пишем в консоль инфу про фалюту в виде response\r",
							"// {\r",
							"//     \"Cur_Abbreviation\": str\r",
							"//     \"Cur_ID\": int,\r",
							"//     \"Cur_Name\": str,\r",
							"//     \"Cur_OfficialRate\": float,\r",
							"//     \"Cur_Scale\": int,\r",
							"//     \"Date\": str\r",
							"// }\r",
							"// 7) переходим к следующей итерации"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{curr_code}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/curr_byn",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
