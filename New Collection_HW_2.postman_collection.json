{
	"info": {
		"_postman_id": "4755a294-d947-48f7-bb1d-d4947362994a",
		"name": "New Collection_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "0/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/first\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Marina",
							"type": "text"
						},
						{
							"key": "age",
							"value": "34",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "700",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "1/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//http://162.55.220.72:5005/user_info_3\r",
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var user_info_3 = pm.response.json();\r",
							"\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"pm.test(\"Test name\", function () {\r",
							"    \r",
							"    pm.expect(user_info_3.name).to.eql(\"Marina\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Test age\", function() {\r",
							"    pm.expect(user_info_3.age).to.eql(\"34\");\r",
							"    });\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Test salary\", function() {\r",
							"    pm.expect(user_info_3.salary).to.eql(700);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let user = request.data;\r",
							"console.log(user);\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Resp name\", function() {\r",
							"    pm.expect(user_info_3.name).to.eql(user.name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Resp age\", function () {\r",
							"    pm.expect(user_info_3.age).to.eql(user.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var salary = parseInt(user.salary);\r",
							"pm.test(\"Resp salary\", function () {\r",
							"    pm.expect(user_info_3.salary).to.eql(salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(\"family\");\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"salary4 = salary * 4;\r",
							"pm.test(\"Resp u_salary\", function () {\r",
							"    pm.expect(user_info_3.u_salary_1_5_year).to.eql(user.salary4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Marina",
							"type": "text"
						},
						{
							"key": "age",
							"value": "34",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "700",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "162.55.220.72:5005/user_info_3",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "2/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var object_info_3 = pm.response.json();\r",
							"    \r",
							"// 4. Спарсить request.\r",
							"\r",
							"var object_3 = pm.request.url.query.toObject();\r",
							"//console.log(object_3);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Test object name\", function () {\r",
							"    pm.expect(object_info_3.name).to.eql(object_3.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let a = String(object_info_3.age);\r",
							"pm.test(\"Test object age\", function () {\r",
							"    pm.expect(a).to.eql(object_3.age);\r",
							"})\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let s = parseInt(object_3.salary);\r",
							"pm.test(\"Test object salary\", function () {\r",
							"    pm.expect(object_info_3.salary).to.eql(s);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(object_info_3.family);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Key name\", function () {\r",
							"pm.expect(object_info_3.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Key age\", function (){\r",
							"    pm.expect(object_info_3.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Name Luky\", function () {\r",
							"    pm.expect(object_info_3.family.pets.dog.name).to.eql(\"Luky\");\r",
							"})\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"Age 4\", function () {\r",
							"    pm.expect(object_info_3.family.pets.dog.age).to.eql(4);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "162.55.220.72:5005/object_info_3?name=Marina&age=34&salary=700",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Marina"
						},
						{
							"key": "age",
							"value": "34"
						},
						{
							"key": "salary",
							"value": "700"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "3/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							" var object_info_4 = pm.response.json();\r",
							" \r",
							"\r",
							"// 4. Спарсить request.\r",
							"var object_4 = pm.request.url.query.toObject();\r",
							"//console.log(object_4);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Check name_4\", function () {\r",
							"    pm.expect(object_info_4.name).to.eql(object_4.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let a_4 = String(object_info_4.age);\r",
							"pm.test(\"Check_age_4\", function () {\r",
							"    pm.expect(a_4).to.eql(object_4.age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(object_4.salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(object_info_4.salary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(object_info_4.salary[0]);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(object_info_4.salary[1]);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(object_info_4.salary[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"let sal = String(object_info_4.salary[0]);\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(sal).to.eql(object_4.salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let sal_1 = (object_info_4.salary[1]);\r",
							"let q = String((object_4.salary)*2);\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(sal_1).to.eql(q);\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.\r",
							"\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(parseInt(object_info_4.salary[2])).to.eql((object_4.salary)*3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\",object_4.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\",object_4.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\",object_4.salary);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"\r",
							"for (i in object_info_4.salary) {\r",
							"  console.log(object_info_4.salary[i] + ' ');\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "162.55.220.72:5005/object_info_4?name=Marina&age=34&salary=700",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Marina"
						},
						{
							"key": "age",
							"value": "34"
						},
						{
							"key": "salary",
							"value": "700"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Вставить параметр salary из окружения в request\r",
							"// var jsonData = JSON.parse(responseBody);\r",
							"// pm.environment.set(salary, jsonData.salary);\r",
							"// pm.environment.get({salary});\r",
							"\r",
							"\r",
							"\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"\r",
							"    var user_info_2 = pm.response.json();\r",
							"    \r",
							"// 7. Спарсить request.\r",
							"     let user_2 = request.data;\r",
							"    //  console.log(user_2);\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"check par start\", function (){\r",
							"    pm.expect(user_info_2).to.have.property(\"start_qa_salary\")\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"check par start 6\", function (){\r",
							"    pm.expect(user_info_2).to.have.property(\"qa_salary_after_6_months\")\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"check par start 12\", function (){\r",
							"    pm.expect(user_info_2).to.have.property(\"qa_salary_after_12_months\")\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"check par start 1_5\", function (){\r",
							"    pm.expect(user_info_2).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"check par start 3_5\", function (){\r",
							"    pm.expect(user_info_2).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"check person\", function (){\r",
							"    pm.expect(user_info_2).to.have.property(\"person\")\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.\r",
							"pm.test(\"check salary\", function (){\r",
							"    pm.expect(String(user_info_2.start_qa_salary)).to.eql(user_2.salary)\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"check salary 6\", function (){\r",
							"    pm.expect(user_info_2.qa_salary_after_6_months).to.eql(parseInt(user_2.salary*2))\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"check salary 12\", function (){\r",
							"    pm.expect(parseInt(user_info_2.qa_salary_after_12_months)).to.eql(parseInt(user_2.salary*2.7))\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"check salary 1_5\", function (){\r",
							"    pm.expect(user_info_2[\"qa_salary_after_1.5_year\"]).to.eql(user_2.salary*3.3);\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"check salary 3_5\", function (){\r",
							"    pm.expect(user_info_2[\"qa_salary_after_3.5_years\"]).to.eql(user_2.salary*3.8);\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"check person_1\", function (){\r",
							"    pm.expect(user_info_2.person.u_name[1]).to.eql(parseInt(user_2.salary));\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"check u_age\", function (){\r",
							"    pm.expect(user_info_2.person.u_age).to.eql(parseInt(user_2.age));\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"check u_salary_5_years\", function (){\r",
							"    pm.expect(user_info_2.person.u_salary_5_years).to.eql(parseInt(user_2.salary*4.2));\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"\r",
							"var l = Object.keys(user_info_2.person).length;\r",
							"console.log(l);\r",
							"\r",
							"for (var i=0; i < l; i++) {\r",
							"    console.log(Object.keys(user_info_2.person)[i]);\r",
							"}\r",
							"\r",
							"   \r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "162.55.220.72:5005/user_info_2",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var resp_token = jsonData.token;\r",
							"console.log(resp_token);\r",
							"\r",
							"\r",
							"pm.environment.set(\"token\", resp_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "marina",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		}
	]
}
